#version 450
#extension GL_EXT_debug_printf : enable

#include "../vars.h"

layout(local_size_x = localSize, local_size_y = localSize) in;
// x:height y:grid-x z:grid-y
layout(binding = 0, rgba32f) uniform image2D imgIn;
layout(binding = 1, rgba32f) uniform image2D imgOut;
layout(binding = 2, rg16f) uniform image2D normal;
layout(binding = 3) uniform sampler2D bathymetry;
layout(std140, binding = 4) uniform UniformBufferObject {
    ivec2 iOffset;
    vec2 bathyUvBl;
    vec2 freqCoordBl;
    vec2 freqCoordTr;
    vec2 freqCoordDel;
    float bathyUvDel;
    int stage;
    float time;
    float scale;
    float dt;
    float dxd; // dx * 2
} ubo;

shared vec4 imgCache[localSize+4][localSize+4];
const float sqrtG = sqrt(g);
const ivec2 waterResHalf = ivec2(waterRes / 2);//TODO
const int sideLocalGroups = waterRes / (localSize * localSize);
const int localWGSize = localSize * localSize;
const int WEST = 0, EAST = 1, NORTH = 2, SOUTH = 3;
const float f0 = 0.00000001;
const float cO = sqrt(g * waterDeepM);

void updateHeight(ivec2 cxy, inout vec4 p) {
    p = imgCache[cxy.x][cxy.y];
    vec4 pxp = imgCache[cxy.x+1][cxy.y];
    vec4 pxn = imgCache[cxy.x-1][cxy.y];
    vec4 pyp = imgCache[cxy.x][cxy.y+1];
    vec4 pyn = imgCache[cxy.x][cxy.y-1];
    if (p.w > f0) {
        float del = (pxp.w * pxp.y - pxn.w * pxn.y + pyp.w * pyp.z - pyn.w * pyn.z) * ubo.dt / ubo.dxd;
        p.x -= del;
        p.w -= del;
    }
    imgCache[cxy.x][cxy.y] = p;
}

shared vec4 boundaryCache[localWGSize + 2];

//#define DBG_STATIC
//#define DBG_BATHY
vec4 waveGen(bool only_in, float bathy, ivec2 coord, vec2 v_dir, vec2 u_dir) {
    if (bathy < 0.1) return vec4(0);
    float vi = 0, ui = 0, h = 0, wi, hi, v_comp, u_comp, w_num, cos_in = 0, in_u = 0, in_v = 0;
    float co = sqrt(g * bathy);
    vec2 w_dir;
    for (int i=0; i<w_count; i++) {
        w_dir = vec2(w_dirs[i][0], w_dirs[i][1]);
        w_num = length(w_dir);
        w_dir = normalize(w_dir);
        v_comp = dot(v_dir, w_dir);
        u_comp = dot(u_dir, w_dir);
        in_v += w_amps[i] * v_comp;
        in_u += w_amps[i] * u_comp;
        if (only_in && v_comp < f0) continue;
        wi = w_num * w_dir.x * (ubo.freqCoordBl.x + coord.x * ubo.freqCoordDel.x)
           + w_num * w_dir.y * (ubo.freqCoordBl.y + coord.y * ubo.freqCoordDel.y);
        wi *= cO / co;
#ifndef DBG_STATIC
        wi += pi2 * cO * (-ubo.time - dt) / (waveDomainSizeM / w_num);
#endif
        hi = w_amps[i] * sin(wi) * co / cO;
        h += hi;
        vi += g / co * hi * v_comp;
        ui += g / co * hi * u_comp;
    }
    return vec4(h, vi, ui, in_v == 0 ? 0 : cos(atan(in_u / in_v)));
}

vec4 boundaryAG(uint side, float bathy, float cosThetaO_old, ivec2 coord, vec2 v_dir, vec2 u_dir, vec3 z, vec3 v, vec3 u) {
    vec3 h = z + bathy;
    if (h.x < f0 || h.y < f0 || h.z < f0 || bathy < f0) return vec4(0);
    vec3 cz = sqrt(g * h);
    vec3 beta = v - 2 * cz;
    float co = sqrt(g * bathy);
    float u_du = u.z - u.x;
    float beta_dv = v.y - v.x + 2 * g * (z.x - z.y) / (cz.x + cz.y);
    float beta_du = v.z - v.x + 2 * g * (z.x - z.z) / (cz.x + cz.z);
    float beta_1_2_co = v.x - 2 * g * z.x / (co + cz.x) + ubo.dt / ubo.dxd * (-v.x * beta_dv + cz.x * (beta_dv + u_du) - u.x * beta_du);
    vec4 genW = waveGen(true, bathy, coord, v_dir, u_dir);
    float u_1 = u.x + (-v.x * (u.y - u.x) - u.x * u_du - g * (z.z - z.x)) / ubo.dxd * ubo.dt;
    float u_r = u_1 - genW.z;
    float v_r = cosThetaO_old / (1 + cosThetaO_old) * (beta_1_2_co - (abs(cz.x * genW.w) < f0 ? 0 : (genW.y * (cz.x * genW.w - co) / (cz.x * genW.w))));
    float v_1 = genW.y + v_r;
    float z_1 = (v_1 - beta_1_2_co) * (co + cz.x/*approx z_1*/) / (2 * g);
    float cosThetaO = abs(v_r) < f0 ? abs(v.x) < f0 ? 0 : cos(atan(u.x/v.x)) : cos(atan(u_r / v_r));
    float coe = smoothstep(0, 0.5, abs(u_r) + abs(v_r));
    float cosThetaOCoe = coe * cosThetaO + (1-coe) * abs(genW.w);
    return vec4(z_1, v_1, u_1, cosThetaOCoe);
}

void main() {
    if (ubo.stage == 1) { //TODO standalone shader
        if (ubo.scale != 1.0) return;
        uint side = gl_WorkGroupID.x / sideLocalGroups;
        uint sideIdx = (gl_WorkGroupID.x % sideLocalGroups) * localWGSize + gl_LocalInvocationIndex;
        int localInvocationIdx = int(gl_LocalInvocationIndex);
        ivec2 coord, coord_v, coord_u, coord_out;
        switch (side) {
            case WEST:  coord = ivec2(1, sideIdx);          coord_v = ivec2(3, sideIdx); break;
            case EAST:  coord = ivec2(waterRes-2, sideIdx); coord_v = ivec2(waterRes-4, sideIdx); break;
            case NORTH: coord = ivec2(sideIdx, waterRes-2); coord_v = ivec2(sideIdx, waterRes-4); break;
            case SOUTH: coord = ivec2(sideIdx, 1);          coord_v = ivec2(sideIdx, 3); break;
        }
        float bathy = waterDeepM - texture(bathymetry, ubo.bathyUvBl + coord * ubo.bathyUvDel).x;
        vec4 result;
        vec2 dir_v, dir_u;
        int idx_u;
        switch (side) {
            case WEST:
                dir_v = vec2(1, 0); dir_u = vec2(0, 1);
                if (ubo.iOffset.x < 0) {
                    for (int i = -ubo.iOffset.x; i > -1; i--) {
                        result = waveGen(false, bathy, ivec2(i, sideIdx), dir_v, dir_u);
                        imageStore(imgOut, ivec2(i, sideIdx), result);
                    }
                    return;
                }
                idx_u = localInvocationIdx + 2;
                break;
            case EAST:
                dir_v = vec2(-1, 0); dir_u = vec2(0, -1);
                if (ubo.iOffset.x > 0) {
                    for (int i = ubo.iOffset.x; i > -1; i--) {
                        result = waveGen(false, bathy, ivec2(waterRes-1-i, sideIdx), dir_v, dir_u);
                        imageStore(imgOut, ivec2(waterRes-1-i, sideIdx), vec4(result.x, -result.y, -result.z, result.w));
                    }
                    return;
                }
                idx_u = localInvocationIdx - 2;
                if (idx_u < 0) idx_u = localWGSize + 2 + idx_u;
                break;
            case NORTH:
                dir_v = vec2(0, -1); dir_u = vec2(1, 0);
                if (ubo.iOffset.y > 0) {
                    for (int i = ubo.iOffset.y+1; i > -1; i--) {
                        result = waveGen(false, bathy, ivec2(sideIdx, waterRes-1-i), dir_v, dir_u);
                        result = vec4(result.x, result.z, -result.y, result.w);
                        imageStore(imgOut, ivec2(sideIdx, waterRes-1-i), result);
                    }
                    return;
                }
                idx_u = localInvocationIdx + 2;
                break;
            case SOUTH:
                dir_v = vec2(0, 1); dir_u = vec2(-1, 0);
                if (ubo.iOffset.y < 0) {
                    for (int i = -ubo.iOffset.y; i > -1; i--) {
                        result = waveGen(false, bathy, ivec2(sideIdx, i), dir_v, dir_u);
                        imageStore(imgOut, ivec2(sideIdx, i), vec4(result.x, -result.z, result.y, result.w));
                    }
                    return;
                }
                idx_u = localInvocationIdx - 2;
                if (idx_u < 0) idx_u = localWGSize + 2 + idx_u;
                break;
        }
        vec4 val = imageLoad(imgOut, coord);
        boundaryCache[gl_LocalInvocationIndex] = val;
        if (localInvocationIdx < 2) {
            switch (side) {
                case WEST:  coord_u = ivec2(1, min(waterRes-1, sideIdx+localWGSize)); break;
                case EAST:  coord_u = ivec2(waterRes-2, max(0, sideIdx-2)); break;
                case NORTH: coord_u = ivec2(min(waterRes-1, sideIdx+localWGSize), waterRes-2); break;
                case SOUTH: coord_u = ivec2(max(0, sideIdx-2), 1); break;
            }
            boundaryCache[localWGSize + localInvocationIdx] = imageLoad(imgOut, coord_u);
        }
        switch (side) {
            case WEST: if (sideIdx == waterRes - 1) return; break;
            case EAST: if (sideIdx == 0) return; break;
            case NORTH: if (sideIdx == waterRes - 1) return; break;
            case SOUTH: if (sideIdx == 0) return; break;
        }
        memoryBarrierShared();
        barrier();
        vec3 z, v, u;
        vec4 val_u = boundaryCache[idx_u];
        vec4 val_v = imageLoad(imgOut, coord_v);
        switch (side) {
            case WEST:  z = vec3(val.x, val_v.x, val_u.x); v =  vec3(val.y, val_v.y, val_u.y); u =  vec3(val.z, val_v.z, val_u.z); coord_out = ivec2(0, sideIdx); break;
            case EAST:  z = vec3(val.x, val_v.x, val_u.x); v = -vec3(val.y, val_v.y, val_u.y); u = -vec3(val.z, val_v.z, val_u.z); coord_out = ivec2(waterRes-1, sideIdx); break;
            case NORTH: z = vec3(val.x, val_v.x, val_u.x); v = -vec3(val.z, val_v.z, val_u.z); u =  vec3(val.y, val_v.y, val_u.y); coord_out = ivec2(sideIdx, waterRes-1); break;
            case SOUTH: z = vec3(val.x, val_v.x, val_u.x); v =  vec3(val.z, val_v.z, val_u.z); u = -vec3(val.y, val_v.y, val_u.y); coord_out = ivec2(sideIdx, 0); break;
        }
        float w = imageLoad(imgOut, coord_out).w;
        result = boundaryAG(side, bathy, w, coord, dir_v, dir_u, z, v, u);
        switch (side) {
            case WEST: break;
            case EAST: result.y = -result.y; break;
            case NORTH:
                w = result.z;
                result.z = -result.y;
                result.y = w;
                break;
            case SOUTH:
                w = -result.z;
                result.z = result.y;
                result.y = w;
                break;
        }
        imageStore(imgOut, coord_out, result);
        return;
    }

    ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
    ivec2 lxy = ivec2(gl_LocalInvocationID.xy);
    ivec2 cxy = ivec2(lxy + ivec2(2));
    vec4 p, pxn, pyn, pxp, pyp;
    float bathy, pw;

    if (ubo.scale != 1.0) {
        ivec2 coordScaled = ivec2((xy - waterResHalf) * ubo.scale + waterResHalf);
        if (coordScaled.x < waterRes-1 && coordScaled.x > 0 && coordScaled.y < waterRes-1 && coordScaled.y > 0) {
            p = imageLoad(imgIn, coordScaled);
        } else {
            vec2 dir_v = vec2(1, 0), dir_u = vec2(0, 1); // default west
            if (xy.x == waterRes-1 && xy.y > 0) {dir_v = vec2(-1, 0); dir_u = vec2(0, -1);}
            if (xy.x < waterRes-1 && xy.y == waterRes-1) {dir_v = vec2(0, -1); dir_u = vec2(1, 0);}
            if (xy.x > 0 && xy.y == 0) {dir_v = vec2(0, 1); dir_u = vec2(-1, 0);}
            bathy = waterDeepM - texture(bathymetry, ubo.bathyUvBl + xy * ubo.bathyUvDel).x;
            p = waveGen(false, bathy, xy, dir_v, dir_u);
        }
        imageStore(imgOut, xy, p);
        return;
    }

#ifdef DBG_STATIC
    p = imageLoad(imgIn, xy + ubo.iOffset);
    pxn = imageLoad(imgIn, (xy + ivec2(-1, 0)) + ubo.iOffset);
    pxp = imageLoad(imgIn, (xy + ivec2(1, 0)) + ubo.iOffset);
    pyn = imageLoad(imgIn, (xy + ivec2(0, -1)) + ubo.iOffset);
    pyp = imageLoad(imgIn, (xy + ivec2(0, 1)) + ubo.iOffset);
#endif
#ifdef DBG_BATHY
    p.x = texture(bathymetry, ubo.bathyUvBl + xy * ubo.bathyUvDel).x - waterDeepM;
    pxn.x = texture(bathymetry, ubo.bathyUvBl + (xy + ivec2(-1, 0)) * ubo.bathyUvDel).x - waterDeepM;
    pxp.x = texture(bathymetry, ubo.bathyUvBl + (xy + ivec2(1, 0)) * ubo.bathyUvDel).x - waterDeepM;
    pyn.x = texture(bathymetry, ubo.bathyUvBl + (xy + ivec2(0, -1)) * ubo.bathyUvDel).x - waterDeepM;
    pyp.x = texture(bathymetry, ubo.bathyUvBl + (xy + ivec2(0, 1)) * ubo.bathyUvDel).x - waterDeepM;
#endif
#if !defined(DBG_STATIC) && !defined(DBG_BATHY)
    if (lxy.y < 8) {
        ivec2 srcCoord, dstCoord;
        if (lxy.y < 2) {
            srcCoord = ivec2(xy.x, xy.y - 2);
            dstCoord = ivec2(cxy.x, lxy.y);
        } else if (lxy.y < 4) {
            srcCoord = ivec2(xy.x, xy.y-2+localSize);
            dstCoord = ivec2(cxy.x, lxy.y+localSize);
        } else if (lxy.y < 6) {
            srcCoord = ivec2(xy.x-lxy.x-2+(lxy.y-4), xy.y-lxy.y+lxy.x);
            dstCoord = ivec2(lxy.y-4, cxy.x);
        } else {
            srcCoord = ivec2(xy.x-lxy.x+(lxy.y-6)+localSize, xy.y-lxy.y+lxy.x);
            dstCoord = ivec2(lxy.y+localSize-4, cxy.x);
        }
        bathy = waterDeepM - texture(bathymetry, ubo.bathyUvBl + srcCoord * ubo.bathyUvDel).x;
        p = imageLoad(imgIn, srcCoord + ubo.iOffset);
        p.x = max(p.x, -bathy);
        p.w = p.x + bathy;
        imgCache[dstCoord.x][dstCoord.y] = p;
    }
    if (lxy.x % (localSize-1) == 0 && lxy.y % (localSize-1) == 0) {
        ivec2 lOffset = ivec2(lxy.x == 0 ? -1 : 1, lxy.y == 0 ? -1 : 1);
        bathy = waterDeepM - texture(bathymetry, ubo.bathyUvBl + (xy + lOffset) * ubo.bathyUvDel).x;
        p = imageLoad(imgIn, xy + ubo.iOffset + lOffset);
        p.x = max(p.x, -bathy);
        p.w = p.x + bathy;
        imgCache[cxy.x + lOffset.x][cxy.y + lOffset.y] = p;
    }
    bathy = waterDeepM - texture(bathymetry, ubo.bathyUvBl + xy * ubo.bathyUvDel).x;
    p = imageLoad(imgIn, xy + ubo.iOffset);
    pw = p.w;
    p.x = max(p.x, -bathy);
    p.w = p.x + bathy;
    imgCache[cxy.x][cxy.y] = p;
    memoryBarrierShared();
    barrier();
    if (xy.x > 1 && xy.x < waterRes-2 && xy.y > 1 && xy.y < waterRes-2) {
        ivec2 br, tl, tr;
        if (p.y > 0) {tl.x = 0; br.x = tr.x = -1;}
        else         {tl.x = 0;  br.x = tr.x = 1;}
        if (p.z > 0) {br.y = 0; tl.y = tr.y = -1;}
        else         {br.y = 0;  tl.y = tr.y = 1;}
        pxp = imgCache[cxy.x + tr.x][cxy.y + tr.y];
        pxn = imgCache[cxy.x + tl.x][cxy.y + tl.y];
        pyp = imgCache[cxy.x + br.x][cxy.y + br.y];
        vec2 pp = clamp(abs(p.yz) * ubo.dt / (ubo.dxd / 2), 0, 1);
        p = mix(mix(p, pyp, pp.x), mix(pxn, pxp, pp.x), pp.y);
        p.x = p.w - bathy;
        imgCache[cxy.x][cxy.y] = p;
    }
    memoryBarrierShared();
    barrier();
    if (xy.x > 0 || xy.x < waterRes-1 || xy.y > 0 || xy.y < waterRes-1) {
        const int secondLast = localSize + 2;
        if (lxy.y == 0) {
            updateHeight(ivec2(cxy.x, 1), p);
        } else if (lxy.y == 1) {
            updateHeight(ivec2(cxy.x, secondLast), p);
        } else if (lxy.y == 2) {
            updateHeight(ivec2(1, cxy.x), p);
        } else if (lxy.y == 3) {
            updateHeight(ivec2(secondLast, cxy.x), p);
        }
        updateHeight(cxy, p);
    }
    memoryBarrierShared();
    barrier();
    pxn = imgCache[cxy.x-1][cxy.y];
    pyn = imgCache[cxy.x][cxy.y-1];
    pxp = imgCache[cxy.x+1][cxy.y];
    pyp = imgCache[cxy.x][cxy.y+1];
    if (p.w < f0) {
        p.y = p.z = 0;
		if (pxn.x - p.x < f0 || pxn.w < f0) pxn.x = p.x;
		if (pyn.x - p.x < f0 || pyn.w < f0) pyn.x = p.x;
		if (pxp.x - p.x < f0 || pxp.w < f0) pxp.x = p.x;
		if (pyp.x - p.x < f0 || pyp.w < f0) pyp.x = p.x;
    }
    p.y = clamp(p.y + g * (pxn.x - pxp.x) * ubo.dt / ubo.dxd, -5, 5);
    p.z = clamp(p.z + g * (pyn.x - pyp.x) * ubo.dt / ubo.dxd, -5, 5);
    if (p.w < 0.005) p.x -= 100;
    p.w = pw;
#endif
    imageStore(imgOut, xy, p);
    imageStore(normal, xy, vec4((pyn.x - pyp.x) / ubo.dxd, (pxn.x - pxp.x) / ubo.dxd, 0, 0));
}
